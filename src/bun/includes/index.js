"use strict";(()=>{var T=Object.defineProperty;var O=(e,t,s)=>t in e?T(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var r=(e,t,s)=>(O(e,typeof t!="symbol"?t+"":t,s),s);var d,v=(d=class{static get memUsed(){return{rss:0,heapTotal:0,heapUsed:0,external:0}}static exit(e=0){process.exit(e)}},r(d,"os",process.platform),r(d,"variant","Bun"),r(d,"version",Bun.version),r(d,"persist",!0),r(d,"networkDefer",!1),d),u="delete,get,has,set,toObject".split(","),g=new Proxy({get:(e,t)=>Bun.env[e]||t,set:(e,t)=>{Bun.env[e]=t},delete:e=>{delete Bun.env[e]},has:e=>!!Bun.env[e],toObject:()=>Bun.env},{get:(e,t)=>u.indexOf(t)<0&&t.constructor==String?e.get(t):e[t],set:(e,t,s)=>{if(u.indexOf(t)<0)if(t.constructor==String)e.set(t,s);else throw new TypeError("Invalid type for key");else throw new Error("Tried to write protected properties")},has:(e,t)=>u.indexOf(t)<0?t.constructor==String?e.has(t):e[t]!=null:!1,deleteProperty:(e,t)=>{if(u.indexOf(t)<0)if(t.constructor==String)e.delete(t);else throw new TypeError("Invalid type for key");else throw new Error("Tried to delete protected properties")}});var $=class{static async read(e,t){return new Uint8Array(await Bun.file(e).arrayBuffer())}static async write(e,t,s){await Bun.write(e,t)}},E=$;var W=class extends EventTarget{#e;#r;#n;#o;#l;#h;#d;#i;#a=[];#s=[];#t=3;#c=!1;CONNECTING=0;OPEN=1;CLOSING=2;CLOSED=3;get protocol(){return this.#e}get hostname(){return this.#r}get port(){return this.#n}get readyState(){return this.#t}get source(){return this.#d}get sink(){return this.#i}addEventListener(e,t,s){e=="open"&&this.readyState==this.OPEN&&t.call(this,new Event("open")),super.addEventListener(e,t,s)}send(e){if(this.#c)throw new Error("Cannot enqueue or send data on a freed connection");this.#t!=1?this.#a.push(e):this.#i?.desiredSize<0||this.#s.length?(this.#s.push(e),this.#i.ready.then(()=>{let t=this.#s.shift();t&&this.#i.write(t)})):this.#i.write(e)}async connect(){if(this.#c)throw new Error("Cannot restart a freed connection");switch(this.#t<this.CLOSING&&console.debug(`${this.#e.toUpperCase()} connection is already open.`),this.#t=this.CONNECTING,this.#e){case"tcp":break;default:throw this.free(),new Error(`Invalid protocol "${this.#e}"`)}this.#t=this.OPEN,this.dispatchEvent(new Event("open"))}close(){switch(this.#t>this.OPEN&&console.debug(`${this.#e.toUpperCase()} connection is already closed.`),this.#t=this.CLOSING,this.#e){case"tcp":break;default:throw this.free(),new Error(`Invalid protocol "${this.#e}"`)}this.#t=this.CLOSED,this.dispatchEvent(new Event("close"))}free(){return this.close(),this.#c=!0,this.#a.splice(0,this.#a.length)}constructor({proto:e,host:t,port:s},a){super(),e=e||"tcp",t=t||"127.0.0.1",s=s||80,this.#e=e,this.#r=t,this.#n=s,this.addEventListener("open",async()=>{this.#a.forEach(n=>{this.send(n)})}),this.addEventListener("close",()=>{this.#s.length&&this.#a.splice(0,0,this.#s.splice(0,this.#s.length))}),a&&this.connect()}},f,k=(f=class{},r(f,"RawClient",W),f),m=k;var b='<!DOCTYPE html><head><meta charset="utf-8"/><title>WingBlade error</title><style>body{background:#000;color:#ccc;}</style></head><body><div style="width:75vw;min-width:360px;max-width:1080px;margin:0 auto;"><p>WingBlade has encountered an error on ${runtime}.</p><pre>${stackTrace}</pre></div></body>\n';var P=class extends EventTarget{#e;#r;#n=!1;#o=[];#l={open:[],message:[],error:[],close:[]};addEventListener(e,t,s){e=="open"&&this.readyState<2&&t.call(this,new Event("open")),super.addEventListener(e,t,s)}get binaryType(){return this.#e?.binaryType||""}get bufferedAmount(){return this.#e?.bufferedAmount||0}get extensions(){return this.#e?.extensions||""}get readyState(){return this.#e?.readyState||0}get url(){return this.#e?.url||this.#r}attach(e){if(this.#n)return!1;if(this.#e)throw new Error("Already attached a WebSocket object");this.#e=e;let t=this;switch(e.readyState){case 0:case 1:{t.dispatchEvent(new Event("open"));break}case 2:case 3:{t.dispatchEvent(new Event("close"));break}}}close(...e){return this.#n=!0,this.#e?.close(...e)}send(e){return this.#e?this.#e.send(e):(this.#o.push(e),e.length||e.size||e.byteLength||0)}constructor(e){super(),this.#r=e.url.replace("http","ws"),this.addEventListener("open",t=>{for(;this.#o.length>0;)this.#e.send(this.#o.shift())})}},I=class{static serve(e,t={}){let s=`${process.cwd()}`,a=t.port||8e3,n=t.hostname||"0.0.0.0",p=Bun.serve({port:a,hostname:n,fetch:async(i,l)=>{i.socket=l;try{let o=await e(i);return o?.constructor!=Response&&(o=new Response(JSON.stringify(o),{headers:{"Content-Type":"text/plain"}})),o}catch(o){let h=o.stack.split(`
`);return h.forEach((B,C,L)=>{L[C]=B.replace("@"," at ").replace("[native code]","bun:internal")}),h.unshift(`${o.name||"Error"}${o.message?":":""} ${o.message||""}`),h=h.join(`
    `),console.error(`Request error at ${i.method} ${i.url}
${h}`),new Response(b.replace("${runtime}",WingBlade.rt.variant).replace("${stackTrace}",h.replaceAll(s,"wingblade:app")),{status:502,headers:{"Content-Type":"text/html"}})}},websocket:{open(i){let l=i.data.wsServer;l.attach(i),l.dispatchEvent(new Event("open"))},message(i,l){i.data.wsServer.dispatchEvent(new MessageEvent("message",{data:l}))},close(i,l,o){i.data.wsServer.dispatchEvent(new Event("close"))}}});return console.error(`WingBlade serving at http://${n=="0.0.0.0"?"127.0.0.1":n}:${a}`),p}static acceptWs(e,t){let s=new P(e);return e.socket.upgrade(e,{data:{wsServer:s}}),{socket:s,response:new Response(null,{status:200})}}},y=I;var R=class{static randomInt(e){return Math.floor(Math.random()*e)}static sleep(e,t=0){return new Promise(s=>{AbortSignal.timeout(e+Math.floor(t*Math.random())).addEventListener("abort",()=>{s()})})}},S=R;var c,w=(c=class{},r(c,"args",Bun.argv.slice(2)),r(c,"rt",v),r(c,"env",g),r(c,"file",E),r(c,"net",m),r(c,"web",y),r(c,"util",S),c);var x=async function(e){WingBlade.web.serve(async(s,a)=>{switch(!0){case s.headers.get("upgrade")?.toLowerCase()=="websocket":{let{socket:n,response:p}=WingBlade.web.acceptWs(s);return n.addEventListener("open",()=>{console.debug("WS opened."),n.send("I like muffins!")}),n.addEventListener("message",i=>{n.send(i.data)}),n.addEventListener("close",()=>{console.debug("WS closed.")}),p;break}default:return`Hello from ${WingBlade.rt.variant} on ${WingBlade.rt.os}!`}}),new WingBlade.net.RawServer({port:8005},!0).addEventListener("accept",async s=>{console.debug("TCP accepted.");let a=s.data;a.addEventListener("open",()=>{console.debug("TCP opened."),a.send(new Uint8Array([240,67,16,247]))}),a.addEventListener("message",({data:n})=>{a.send(n)}),a.addEventListener("close",()=>{console.debug("TCP closed.")})})};self.WingBlade=w;x(w.args);})();
